% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Simulate_Pop.R
\name{Simulate_Pop}
\alias{Simulate_Pop}
\title{Simulates a spatial, sex, and age-structured population and takes a variety of inputs, with dependecies on various functions (see example)}
\usage{
Simulate_Pop(output_path)
}
\arguments{
\item{output_path}{path to output simulation objects}
}
\value{
a list object with a bunch of simulated values and outputs
}
\description{
Simulates a spatial, sex, and age-structured population and takes a variety of inputs, with dependecies on various functions (see example)
}
\examples{
\dontrun{
library(here)
# Setup Simulation Parameters --------------------------------------------
# Set up model dimensions
Setup_Sim_Dim(n_sims = 150,
              n_yrs = 30,
              n_regions = 2,
              n_ages = 10,
              n_sexes = 1,
              n_fish_fleets = 1,
              n_srv_fleets = 1)

Setup_Sim_Containers(n_sims = n_sims,
                     n_yrs = n_yrs,
                     n_regions = n_regions,
                     n_ages = n_ages,
                     n_sexes = n_sexes,
                     n_fish_fleets = n_fish_fleets,
                     n_srv_fleets = n_srv_fleets)

# Setup fishing mortality
Setup_Sim_FishMort(n_sims = n_sims,
                   n_yrs = n_yrs,
                   n_regions = n_regions,
                   n_fish_fleets = n_fish_fleets,
                   sigmaC = 1e-3,
                   init_F = matrix(0, nrow = n_regions, ncol = n_fish_fleets),
                   Fmort_pattern = matrix(c('constant', "two-way"), nrow = n_regions, ncol = n_fish_fleets),
                   Fmort_start = matrix(c(0.5, 0.5), nrow = n_regions, ncol = n_fish_fleets),
                   Fmort_fct = matrix(c(1, 0.5), nrow = n_regions, ncol = n_fish_fleets),
                   proc_error = TRUE,
                   proc_error_sd = 0.1)

# Setup fishery selectivity
Setup_Sim_FishSel(n_sims = n_sims,
                  n_yrs = n_yrs,
                  n_regions = n_regions,
                  n_ages = n_ages,
                  n_sexes = n_sexes,
                  n_fish_fleets = n_fish_fleets,
                  sel_model = matrix(c('logistic', "logistic"), nrow = n_regions, ncol = n_fish_fleets),
                  # a50, k for logistic shared across regions
                  fixed_fish_sel_pars = array(c(5,5,1,1), dim = c(n_regions, n_sexes, n_fish_fleets, 2))
)

# Setup survey catchability and selectivity
Setup_Sim_Survey(n_sims = n_sims,
                 n_yrs = n_yrs,
                 n_regions = n_regions,
                 n_ages = n_ages,
                 n_sexes = n_sexes,
                 n_srv_fleets = n_srv_fleets,
                 sigmaSrvIdx = array(0.2, dim = c(n_regions, n_srv_fleets)), # survey observation error
                 base_srv_q = array(1, dim = c(n_regions, n_srv_fleets)), # base survey catchability value
                 srv_q_pattern = matrix(c('constant', "constant"),
                                        nrow = n_regions, ncol = n_srv_fleets), # catchability pattern
                 sel_model = matrix(c('logistic', "logistic"),
                                    nrow = n_regions, ncol = n_srv_fleets), # selectivity model
                 # a50, k, for logistic shared across regions
                 fixed_srv_sel_pars = array(c(5,5,1,1), dim = c(n_regions, n_sexes, n_srv_fleets, 2))
)

# Setup recruitment stuff
Setup_Sim_Rec(n_yrs = n_yrs,
              n_regions = n_regions,
              n_sexes = n_sexes,
              n_sims = n_sims,
              do_recruits_move = 0, # == 0, recruits don't move , == 1 recruits move
              base_rec_sexratio = 1, # single sex
              rec_sexratio_vary = "constant",
              base_r0 = c(50, 10),
              r0_vary = "constant",
              base_h = 1,
              init_sigmaR = 0.5,
              sigmaR = 0.5,
              recruitment_opt = 0, # == 0, mean recruitment
              recdev_opt = 0) # == 0, global rec devs, == 1, local rec devs

# Setup biologicals
Setup_Sim_Biologicals(n_sims = n_sims,
                      n_yrs = n_yrs,
                      n_regions = n_regions,
                      n_ages = n_ages,
                      n_sexes = n_sexes,
                      base_M_value = array(0.15, dim = c(n_regions, n_ages, n_sims)),
                      M_pattern = "constant",
                      base_WAA_values = array(rep(5 * (1 - exp(-0.1 * 1:n_ages)),
                                                  each = n_regions * n_sexes),
                                              dim = c(n_regions, n_ages, n_sexes)),
                      WAA_pattern = "constant",
                      base_Maturity_AA_values = array(rep(1 / (1 + exp(-0.3 * 1:n_ages)),
                                                          each = n_regions * n_sexes),
                                                      dim = c(n_regions, n_ages, n_sexes)),
                      Maturity_AA_pattern = "constant"
)

# Setup tagging stuff
Setup_Sim_Tagging(n_sims = n_sims,
                  n_yrs = n_yrs,
                  n_regions = n_regions,
                  n_ages = n_ages,
                  n_sexes = n_sexes,
                  n_tags = 1e4,
                  max_liberty = 30,
                  tag_years = seq(1, n_yrs, 3),
                  t_tagging = 0.5,
                  base_Tag_Reporting = rep(0.2, n_regions),
                  Tag_Reporting_pattern = "constant",
                  Tag_Ind_Mort = 0,
                  Tag_Shed = 0
)

# Setup observation processes
Setup_Sim_Observation_Proc(n_fish_fleets = n_fish_fleets,
                           n_srv_fleets = n_srv_fleets,
                           Comp_Structure = "JntSex_JntRegion",
                           Comp_Srv_Like = "Multinomial",
                           Comp_Fish_Like = "Multinomial",
                           Srv_Like_Pars = NA,
                           Fish_Like_Pars = NA,
                           Tag_Like = "Poisson",
                           Tag_Like_Pars = NA
)

# Setup movement matrix
movement_matrix <- array(0, dim = c(n_regions, n_regions, n_yrs, n_ages, n_sexes, n_sims)) # From, To
for(y in 1:n_yrs) {
  for(a in 1:n_ages) {
    for(s in 1:n_sexes) {
      for(sim in 1:n_sims) {
        movement_matrix[,,y,,s,sim] <- rep(0.5, 4)
      }
    } # end s loop
  } # end a loop
} # end y loop

# Run Simulation ----------------------------------------------------------
Simulate_Pop(output_path = here("sim_out.RDS"))
}
}
